# This workflow is a starting point to integrate with the Azure SG/RG management logic
# It currently starts the creation of a new resource group
# when a Project Card (e.g. Issue inside of a Project Board) is moved to the "In progress" column.

name: Manage Resource Groups

on:
  project_card

env:
  COL_TODO: 'To do'
  COL_INPG: 'In progress'
  COL_DONE: 'Done'
  ORG_NAME: ${{ github.repository_owner }}

jobs:
  update-project:
    if: github.event.action == 'moved'
    runs-on: [ubuntu-latest]
  
    steps:
      - uses: actions/github-script@v2
        name: Create or tear down resource group
        id: rg_crud
        # This is to ensure the project card being moved is an "issue" and not a "note"
        if: contains(github.event.project_card.content_url, 'issues/')
        with:
          # github-token: ${{ secrets.ACTION_PAT }}
          script: |
            const { COL_TODO, COL_INPG, COL_DONE, ORG_NAME} = process.env;
            const {column_id, content_url } = context.payload.project_card;
                    
            // Retrieve column info
            const { data: { name: column_name }}  = await github.projects.getColumn({
              column_id,
            });

            // Get issue details from the project card
            let { data : { labels, body, state, title, number, user }} = await github.request(`GET ${content_url}`);
            const rg_name = title.toLowerCase().replace(/ /g,'-').replace(/[^\w-]+/g,'');
            core.setOutput('rg_name', rg_name);

            switch (column_name) {
              case COL_TODO:
                console.log("A new Issue was added to the Project board. Nothing to do here!");
                break;
              case COL_INPG:
                console.log("A new request for a demo environment was approved. Initiating sequence...", rg_name);      
                core.setOutput('rg_create', true);
                break;
              case COL_DONE:
                console.log("Tear down demo environment", rg_name);
                core.setOutput('rg_teardown', true);
                break;
              default:
                console.log(`Column ${column_name} not found in Project Board. Skipping...`); 
                break;
            }
      - name: azure authentication
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Create Azure Resource Group
        if: ${{ steps.rg_crud.outputs.rg_create && steps.rg_crud.outputs.rg_name }}
        uses: azure/CLI@v1
        with:
          inlineScript: |
            resource_group_name=${{ steps.rg_crud.outputs.rg_name }}            
            azure_region="southeastasia"
            rgjson=$(az group create --name  $resource_group_name --location $azure_region )
            echo "$rgjson"
            aksjson=$(az aks create --resource-group $resource_group_name --name aks --node-count 1 )
            echo "$aksjson"
      - name: Delete Azure Resource Group
        uses: azure/CLI@v1
        if: ${{ steps.rg_crud.outputs.rg_teardown && steps.rg_crud.outputs.rg_name }}
        with:
          inlineScript: |
            # tear down resource group
            az group delete --name ${{ steps.rg_crud.outputs.rg_name }} --yes --no-wait
