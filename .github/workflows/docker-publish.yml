name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master
    paths:
      - 'azure-voting-app-redis-master/azure-vote/**'

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

env:
  IMAGE_NAME: azure-vote
  CLUSTER_NAME: aks
  CLUSTER_RESOURCE_GROUP: aks-demos
  NAMESPACE: default

jobs:
  push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
 
      # TODO: Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
    
      - name: Push image to GitHub Container Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          
          echo $IMAGE_ID
          docker build ./azure-voting-app-redis-master/azure-vote -t $IMAGE_ID:${{ github.sha }}
          docker push $IMAGE_ID:${{ github.sha }}

  # Deploy to AKS
  build-and-deploy:
    needs: push
    name: Deploy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - name: start deployment
      uses: bobheadxi/deployments@master
      id: deployment
      with:
        step: start
        token: ${{ secrets.GITHUB_TOKEN }}
        env: staging

    # Set the target Azure Kubernetes Service (AKS) cluster. 
    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

    # Create namespace if doesn't exist
    - run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -

    # Deploy app to AKS
    - uses: azure/k8s-deploy@v1
      with:
        manifests: |
          manifests/azure-vote.yaml
        images: |
          ghcr.io/faten-org/azure-vote:${{ github.sha }}
        namespace: ${{ env.NAMESPACE }}
        
    # Update deployment with IP
      id: ingress    
    - run: |
        LB_IP=$(kubectl get svc azure-vote-front -o jsonpath="{.status.loadBalancer.ingress[*].ip}")
        echo "::set-output name=lb_ip::$LB_IP"

    - name: update deployment status
      uses: bobheadxi/deployments@master
      if: always()
      with:
        step: finish
        token: ${{ secrets.GITHUB_TOKEN }}
        status: ${{ job.status }}
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
        env_url: "https://google.com"
